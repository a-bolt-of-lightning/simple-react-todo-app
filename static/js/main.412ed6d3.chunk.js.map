{"version":3,"sources":["components/Task.js","components/TaskList.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Task","className","ListGroup","Item","this","props","name","onClick","removeItem","editItem","Component","TaskList","items","map","item","key","id","removeAnItem","editAnItem","Input","Form","onSubmit","handleSubmit","Group","InputGroup","Prepend","Text","Control","size","type","placeholder","value","onChange","handleChange","Button","variant","App","setRemoveActive","console","log","state","length","setState","removeActive","e","target","uuid","preventDefault","updatedArray","newItems","removeItems","filter","response","selectedItem","find","Row","Col","Card","Body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.412ed6d3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport {ListGroup} from 'react-bootstrap';\r\n\r\n\r\nclass Task extends Component {\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"m-2\">\r\n          <ListGroup.Item className=\"justify-content-between d-flex flex-row\"> \r\n\t\t\t\t\t\t{this.props.name} \r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<span> <i className=\"fa fa-trash\" onClick={this.props.removeItem} /> </span>\r\n\t\t\t\t\t\t\t<span> <i className=\"fa fa-pencil\" onClick={this.props.editItem}/> </span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ListGroup.Item>    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React, {Component} from 'react';\r\nimport Task from './Task';\r\nimport {ListGroup} from 'react-bootstrap';\r\n\r\n\r\nclass TaskList extends Component {\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"card\">\r\n\t\t\t<h4 className=\"text-center m-2\">Tasks Go Here ...</h4>\r\n\t\t\t\t<ListGroup >\r\n\t\t\t\t\t<div >\r\n\t\t\t\t\t\t{this.props.items.map( (item) => <Task key={item.id} name={item.name} removeItem={() => this.props.removeAnItem(item.id)} editItem={() => this.props.editAnItem(item.id)} /> )} \r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskList;","import React, {Component} from 'react';\r\nimport {Form, Button, FormLabel, InputGroup} from 'react-bootstrap';\r\n\r\n\r\nclass Input extends Component {\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"mt-4\">\r\n\t\t\t\t<Form  onSubmit={this.props.handleSubmit}>\r\n\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t<InputGroup>\r\n\t\t\t\t\t\t\t<InputGroup.Prepend>\r\n\t\t\t\t\t\t\t\t<InputGroup.Text id=\"basic-addon1\"> <i className=\"fa fa-sticky-note\" /> </InputGroup.Text>\r\n\t\t\t\t\t\t\t</InputGroup.Prepend>\r\n\t\t\t\t\t\t\t<Form.Control size=\"lg\" type=\"text\" placeholder=\"task\" value={this.props.item.name} onChange={this.props.handleChange} />\r\n\t\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t\t<Button className=\"btn-block mt-4\" variant={!this.props.editItem ? \"info\" : \"success\"} type=\"submit\">{!this.props.editItem ? \"Add Task\" : \"Edit Task\"}</Button>\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t</Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;","import React, {Component} from 'react';\nimport TaskList from './components/TaskList';\nimport Input from './components/Input';\nimport {Card, Col, Row} from 'react-bootstrap';\nimport uuid from 'uuid';\n\nclass App extends Component{\n\n  constructor(props){\n    super(props);\n\n    this.state={\n      removeActive: false,\n      items:[],\n      item:{\n        id: 0,\n        name : \"\"\n      },\n      editItem: false\n    }\n  }\n\n  setRemoveActive = () => {\n    \n    console.log(this.state.items);\n      if(this.state.items.length === 0 ){\n        this.setState({removeActive: false});\n      }\n  }\n\n  handleChange = (e) => {\n    if(this.state.editItem){\n      this.setState({item: {\n        name: e.target.value,\n        id: this.state.item.id,\n      }});\n    }else{\n      this.setState({item: {\n        name: e.target.value,\n        id: uuid(),\n      }});\n    }\n    \n  }\n  \n  handleSubmit = (e) => {\n    \n    e.preventDefault();\n    if(this.state.item.name === \"\") {\n      return;\n    }\n\n    if(this.state.editItem){\n      console.log(\"lol\");\n      const updatedArray = this.state.items.map( (item) => item.id===this.state.item.id ? this.state.item : item );\n\n      this.setState({\n        items: updatedArray\n      });\n      \n    }else{\n      const newItems = [...this.state.items, this.state.item];\n      this.setState({\n        items: newItems\n      });\n    }\n\n    \n    this.setState({\n      item:{\n        name: \"\",\n        id: 0\n      },\n      removeActive:true,\n      editItem: false\n    });\n\n  }\n\n  removeItems = () => {\n    this.setState({\n      item: {\n        name: \"\",\n        id: 0\n      },\n      items: [],\n      removeActive: false\n    });\n  }\n\n  removeAnItem = (id) => {\n    const newItems = this.state.items.filter( (item) => item.id !== id );\n    this.setState({\n      items: newItems,\n    }, (response => this.setRemoveActive()));\n  }\n\n  editAnItem = (id) => {\n\n    const selectedItem = this.state.items.find((item) => item.id === id)\n    this.setState({\n      item: selectedItem,\n      editItem: true\n    });\n  }\n\n  render(){\n    return (\n        <div className=\"container\">\n          <Row>\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Input item={this.state.item}  handleChange={this.handleChange} handleSubmit={this.handleSubmit} editItem={this.state.editItem}/>\n                  <TaskList items={this.state.items} removeAnItem={this.removeAnItem} editAnItem={this.editAnItem}/>\n                  <div className={\"btn btn-block \" + (this.state.removeActive ? \"btn-danger\" : \"btn-dark\")} onClick={this.removeItems}>Remove All Tasks</div>\n                </Card.Body>\n              </Card> \n            </Col>\n          </Row>\n        </div>\n    );    \n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}